#!/bin/bash

echo "üîç Sprawdzanie systemu na Jetson Orin NX 16GB..."
echo "---------------------------------------------"

# Sprawdzanie wersji JetPack
echo "‚û°Ô∏è Sprawdzanie wersji JetPack..."
if [ -f "/etc/nv_tegra_release" ]; then
    JETPACK_VERSION=$(head -n 1 /etc/nv_tegra_release)
    echo "‚úÖ JetPack: $JETPACK_VERSION"
else
    echo "‚ùå JetPack NIE znaleziony! Sprawd≈∫ instalacjƒô."
fi

# Sprawdzanie CUDA
echo "‚û°Ô∏è Sprawdzanie CUDA..."
if command -v nvcc &> /dev/null; then
    CUDA_VERSION=$(nvcc --version | grep release | awk '{print $6}')
    echo "‚úÖ CUDA: $CUDA_VERSION"
else
    echo "‚ùå CUDA NIE jest zainstalowana! Sprawd≈∫ JetPack SDK."
fi

# Sprawdzanie cuDNN
echo "‚û°Ô∏è Sprawdzanie cuDNN..."
if [ -f "/usr/include/cudnn_version.h" ]; then
    cuDNN_VERSION=$(grep "#define CUDNN_MAJOR" /usr/include/cudnn_version.h | awk '{print $3}')
    echo "‚úÖ cuDNN: v$cuDNN_VERSION"
else
    echo "‚ùå cuDNN NIE jest zainstalowany!"
fi

# Sprawdzanie TensorRT
echo "‚û°Ô∏è Sprawdzanie TensorRT..."
if command -v tensorrt &> /dev/null || ls /usr/lib/aarch64-linux-gnu/libnvinfer.so* 1>/dev/null 2>&1; then
    echo "‚úÖ TensorRT jest zainstalowany."
else
    echo "‚ùå TensorRT NIE jest zainstalowany!"
fi

# Sprawdzanie sterownik√≥w NVIDIA i GPU
echo "‚û°Ô∏è Sprawdzanie sterownik√≥w NVIDIA..."
if command -v nvidia-smi &> /dev/null; then
    nvidia-smi
    echo "‚úÖ Sterowniki NVIDIA dzia≈ÇajƒÖ!"
else
    echo "‚ùå NVIDIA-SMI NIE znalezione! Sprawd≈∫ sterowniki."
fi

# Sprawdzanie dostƒôpno≈õci GPU
echo "‚û°Ô∏è Sprawdzanie dostƒôpno≈õci GPU..."
if command -v tegrastats &> /dev/null; then
    tegrastats --interval 1000 --log-only &
    sleep 2
    pkill tegrastats
    echo "‚úÖ GPU dostƒôpne."
else
    echo "‚ùå GPU NIE dostƒôpne! Mo≈ºe brakowaƒá sterownik√≥w."
fi

# Sprawdzanie Docker
echo "‚û°Ô∏è Sprawdzanie Docker..."
if command -v docker &> /dev/null; then
    echo "‚úÖ Docker jest zainstalowany."
else
    echo "‚ùå Docker NIE jest zainstalowany!"
fi

# Sprawdzanie czy Docker dzia≈Ça
echo "‚û°Ô∏è Sprawdzanie, czy Docker dzia≈Ça..."
if systemctl is-active --quiet docker; then
    echo "‚úÖ Docker dzia≈Ça poprawnie."
else
    echo "‚ùå Docker NIE dzia≈Ça! Uruchom: sudo systemctl start docker"
fi

# Sprawdzanie kontener√≥w Docker
echo "‚û°Ô∏è Sprawdzanie kontener√≥w Docker..."
if docker ps &> /dev/null; then
    if docker ps | grep -q "ollama"; then
        echo "‚úÖ Kontener Ollama dzia≈Ça."
    else
        echo "‚ùå Kontener Ollama NIE dzia≈Ça! Uruchom: docker start ollama"
    fi

    if docker ps | grep -q "anythingllm"; then
        echo "‚úÖ Kontener AnythingLLM dzia≈Ça."
    else
        echo "‚ùå Kontener AnythingLLM NIE dzia≈Ça! Uruchom: docker start anythingllm"
    fi
else
    echo "‚ùå Brak dostƒôpu do Docker! Mo≈ºe byƒá problem z uprawnieniami."
fi

# Sprawdzanie PyTorch
echo "‚û°Ô∏è Sprawdzanie PyTorch..."
PYTORCH_VERSION=$(python3 -c "import torch; print(torch.__version__)" 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ PyTorch: v$PYTORCH_VERSION"
else
    echo "‚ùå PyTorch NIE jest zainstalowany!"
fi

# Sprawdzanie torchvision
echo "‚û°Ô∏è Sprawdzanie torchvision..."
TORCHVISION_VERSION=$(python3 -c "import torchvision; print(torchvision.__version__)" 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ torchvision: v$TORCHVISION_VERSION"
else
    echo "‚ùå torchvision NIE jest zainstalowany!"
fi

# Sprawdzanie torchaudio
echo "‚û°Ô∏è Sprawdzanie torchaudio..."
TORCHAUDIO_VERSION=$(python3 -c "import torchaudio; print(getattr(torchaudio, '__version__', 'BRAK'))" 2>/dev/null)
if [ "$TORCHAUDIO_VERSION" != "BRAK" ]; then
    echo "‚úÖ torchaudio: v$TORCHAUDIO_VERSION"
else
    echo "‚ùå torchaudio NIE jest zainstalowany!"
fi

# Sprawdzanie modeli w Ollama
echo "‚û°Ô∏è Sprawdzanie modeli w Ollama..."
if docker ps | grep -q "ollama"; then
    docker exec ollama ollama list &> /dev/null
    if [ $? -eq 0 ]; then
        echo "‚úÖ Ollama dzia≈Ça i ≈Çaduje modele."
    else
        echo "‚ùå Ollama NIE odpowiada! Sprawd≈∫ kontener: docker logs ollama"
    fi
else
    echo "‚ùå Kontener Ollama NIE dzia≈Ça! Uruchom: docker start ollama"
fi

echo "‚úÖ Sprawdzanie zako≈Ñczone!"

